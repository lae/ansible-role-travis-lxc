---
# tasks file for ansible-role-travis-lxc
- set_fact:
    ansible_python_interpreter: "{{ lookup('env', 'VIRTUAL_ENV') }}/bin/python"
    container_config: "{{ container_config }} + {{ travis_lxc_network_config }}"

- include: validate_variables.yml
- include: travis_packaging_setup.yml

- name: Create SSH directory for current user
  file:
    path: "~{{ ansible_user_id }}/.ssh"
    state: directory
    mode: 0700

- name: Generate local ssh-rsa key
  user:
    name: "{{ ansible_user_id }}"
    generate_ssh_key: true
    ssh_key_file: "~{{ ansible_user_id }}/.ssh/id_rsa"
    ssh_key_type: rsa
    ssh_key_comment: "{{ ansible_user_id }}@{{ ansible_hostname }}-lxctest"

- block:
  - name: Create LXC containers for requested test profiles
    lxc_container:
      name: "{{ item.0.profile }}-{{ '%02d' | format(item.1) }}"
      template: "{{ item.0.profile.split('-').0 }}"
      template_options: >-
        {% set __profile = item.0.profile.split('-') %}
        --release {{ __profile.1 }}
        {% if __profile.0 in ['debian', 'ubuntu'] %}
        --mirror
        {% if __profile.0 == 'ubuntu' %}
        {{ __travis_ubuntu_mirror }}
        {% else %}
        http://deb.debian.org/debian
        {% endif %}
        --packages {{ (travis_lxc_profiles[item.0.profile]['packages'] + additional_packages) | join(',') }}
        {% endif %}
      container_config: "{{ container_config }}"
      state: started
    environment: "{{ travis_lxc_profiles[item.0.profile]['environment'] | default(omit) }}"
    register: __containers
    async: 7200
    poll: 0
    changed_when: false
    with_nested:
      - "{{ test_profiles }}"
      - "{{ range(1, hosts_per_profile + 1) | list }}"

  - name: Wait for container creation tasks to complete
    async_status:
      jid: "{{ item.ansible_job_id }}"
    register: __container_create
    until: __container_create.finished
    retries: 300
    with_items: "{{ __containers.results }}"

  - name: Wait until containers have active IP addresses
    lxc_container:
      name: "{{ host_prefix }}{{ '%s' | format(item) }}"
      name: "{{ item.0.profile }}-{{ '%02d' | format(item.1) }}"
      container_command: "until (ip addr show eth0 up | grep -q 'inet '); do sleep 1; done"
    changed_when: false
    with_nested:
      - "{{ test_profiles }}"
      - "{{ range(1, hosts_per_profile + 1) | list }}"

  - debug:
      var: __containers
      verbosity: 1

  - name: Post configuration on {{ travis_lxc_distributions[__distro] }} container(s)
    lxc_container:
      name: "{{ __ct_creation.results[(item|int)-1].lxc_container.name }}"
      container_command: "{{ travis_lxc_template_container_command }}"
    with_sequence: count="{{ host_quantity | int }}"
    when:
      - travis_lxc_template_container_command is defined
      - __ct_creation.results[(item|int)-1] | changed

  - set_fact:
      lxc_hosts: "{{ lxc_hosts | default([]) | union([{'host': item.name, 'ip': item.ips[0]}]) }}"
    with_items: "{{ containers.results | map(attribute='lxc_container') | list }}"

  - name: Add test container(s) to host's /etc/hosts
    lineinfile:
      dest: /etc/hosts
      regexp: "^.* {{ item.host }}.lxc"
      line: "{{ item.ip }} {{ item.host }}.lxc"
    with_items: "{{ lxc_hosts }}"

  - name: Add test container(s) to container /etc/hosts
    lineinfile:
      dest: "/var/lib/lxc/{{ item.0 }}/rootfs/etc/hosts"
      regexp: "^.* {{ item.1.host }}.lxc"
      line: "{{ item.1.ip }} {{ item.1.host }}.lxc"
    with_nested:
      - "{{ lxc_hosts | map(attribute='host') | list }}"
      - "{{ lxc_hosts }}"

  - name: Create .ssh directory in containers
    file:
      path: "/var/lib/lxc/{{ item.host }}/rootfs/root/.ssh/"
      state: directory
      mode: 0700
    with_items: "{{ lxc_hosts }}"

  - name: Copy current user's public key into containers
    copy:
      src: "~/.ssh/id_rsa.pub"
      dest: "/var/lib/lxc/{{ item.host }}/rootfs/root/.ssh/authorized_keys"
      mode: 0600
    with_items: "{{ lxc_hosts }}"
  become: True

- name: Collect SSH host keys
  shell: "ssh-keyscan {{ item.host }}.lxc > ~{{ ansible_user_id }}/.ssh/{{ item.host }}.pub"
  args:
    creates: "~{{ ansible_user_id }}/.ssh/{{ item.host }}.pub"
  with_items: "{{ lxc_hosts }}"

- name: Add all containers to user's known_hosts
  blockinfile:
    marker: "# {mark} {{ item.host }}"
    content: "{{ lookup('file', '~' + ansible_user_id + '/.ssh/' + item.host + '.pub') }}"
    dest: "~{{ ansible_user_id }}/.ssh/known_hosts"
    create: yes
  with_items: "{{ lxc_hosts }}"

# vim:ft=ansible:
