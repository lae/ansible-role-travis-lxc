---
# tasks file for ansible-role-travis-lxc
- set_fact:
    ansible_python_interpreter: "{{ lookup('env', 'VIRTUAL_ENV') }}/bin/python"

- block:
  - name: Symlink OS python-apt into Travis Python virtualenv
    file:
      src: "/usr/lib/python2.7/dist-packages/{{ item }}"
      path: "{{ lookup('env', 'VIRTUAL_ENV') }}/lib/python2.7/site-packages/{{ item }}"
      state: link
    with_items:
      - apt
      - apt_pkg.so
      - apt_inst.so
      - aptsources

  - name: Set Travis Docker repository to only pull 64-bit
    replace:
      path: /etc/apt/sources.list.d/docker.list
      regexp: '^deb\s+"http'
      replace: 'deb [arch=amd64] "http'

  - name: Configure LXC PPA
    apt_repository:
      repo: "ppa:ubuntu-lxc/stable"

  - name: Install needed packages
    apt:
      name: "{{ item }}"
      update_cache: yes
      cache_valid_time: 3600
      state: latest
    with_items: "{{ travis_lxc_packages }}"
  become: True

- name: Install needed Python libraries
  pip:
    name: "{{ travis_lxc_eggs }}"
    state: latest

- name: Create SSH directory for current user
  file:
    path: "~{{ ansible_user_id }}/.ssh"
    state: directory
    mode: 0700

- name: Generate local ssh-rsa key
  user:
    name: "{{ ansible_user_id }}"
    generate_ssh_key: true
    ssh_key_file: "~{{ ansible_user_id }}/.ssh/id_rsa"
    ssh_key_type: rsa
    ssh_key_comment: "{{ ansible_user_id }}@{{ ansible_hostname }}-lxctest"

- block:
  - include: "{{ template }}-{{ release }}.yml"

  - name: Wait for test containers to come online
    lxc_container:
      name: "{{ host_prefix }}{{ '%s' | format(item) }}"
      container_command: "until (ip addr show eth0 up | grep -q 'inet '); do sleep 1; done"
    changed_when: false
    register: containers
    with_sequence: count="{{ host_quantity | int }}" format="%02d"

  - debug:
      var: containers
      verbosity: 2

  - include: "{{ file_item }}"
    with_first_found:
      - files:
        - "{{ template }}-{{ release }}-post.yml"
        skip: true
    loop_control:
      loop_var: file_item

  - set_fact:
      lxc_hosts: "{{ lxc_hosts | default([]) | union([{'host': item.name, 'ip': item.ips[0]}]) }}"
    with_items: "{{ containers.results | map(attribute='lxc_container') | list }}"

  - name: Add test container(s) to host's /etc/hosts
    lineinfile:
      dest: /etc/hosts
      regexp: "^.* {{ item.host }}.lxc"
      line: "{{ item.ip }} {{ item.host }}.lxc"
    with_items: "{{ lxc_hosts }}"

  - name: Add test container(s) to container /etc/hosts
    lineinfile:
      dest: "/var/lib/lxc/{{ item.0 }}/rootfs/etc/hosts"
      regexp: "^.* {{ item.1.host }}.lxc"
      line: "{{ item.1.ip }} {{ item.1.host }}.lxc"
    with_nested:
      - "{{ lxc_hosts | map(attribute='host') | list }}"
      - "{{ lxc_hosts }}"

  - name: Create .ssh directory in containers
    file:
      path: "/var/lib/lxc/{{ item.host }}/rootfs/root/.ssh/"
      state: directory
      mode: 0700
    with_items: "{{ lxc_hosts }}"

  - name: Copy current user's public key into containers
    copy:
      src: "~/.ssh/id_rsa.pub"
      dest: "/var/lib/lxc/{{ item.host }}/rootfs/root/.ssh/authorized_keys"
      mode: 0600
    with_items: "{{ lxc_hosts }}"
  become: True

- name: Collect SSH host keys
  shell: "ssh-keyscan {{ item.host }}.lxc > ~{{ ansible_user_id }}/.ssh/{{ item.host }}.pub"
  args:
    creates: "~{{ ansible_user_id }}/.ssh/{{ item.host }}.pub"
  with_items: "{{ lxc_hosts }}"

- name: Add all containers to user's known_hosts
  blockinfile:
    marker: "# {mark} {{ item.host }}"
    content: "{{ lookup('file', '~' + ansible_user_id + '/.ssh/' + item.host + '.pub') }}"
    dest: "~{{ ansible_user_id }}/.ssh/known_hosts"
    create: yes
  with_items: "{{ lxc_hosts }}"

# vim:ft=ansible:
