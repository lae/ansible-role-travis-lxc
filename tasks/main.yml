---
# tasks file for ansible-role-travis-lxc
- set_fact:
    ansible_python_interpreter: "{{ lookup('env', 'VIRTUAL_ENV') }}/bin/python"
    container_config: "{{ container_config }} + {{ travis_lxc_network_config }}"
    __distro: "{{ template }}.{{ release }}"

- name: Check if requested distribution is supported
  fail:
    msg: "The selected distribution is not supported (template: {{ template }}, release: {{ release }})"
  when: __distro not in travis_lxc_distributions

- name: Load template-specific variables
  include_vars: "{{ template }}.yml"

- block:
  - name: Symlink OS python-apt into Travis Python virtualenv
    file:
      src: "/usr/lib/python2.7/dist-packages/{{ item }}"
      path: "{{ lookup('env', 'VIRTUAL_ENV') }}/lib/python2.7/site-packages/{{ item }}"
      state: link
    with_items:
      - apt
      - apt_pkg.so
      - apt_inst.so
      - aptsources

  - name: Set Travis Docker repository to only pull 64-bit
    replace:
      dest: /etc/apt/sources.list.d/docker.list
      regexp: '^deb\s+"http'
      replace: 'deb [arch=amd64] "http'

  - name: Configure LXC PPA
    apt_repository:
      repo: "ppa:ubuntu-lxc/stable"

  - name: Install needed packages
    apt:
      name: "{{ item }}"
      update_cache: yes
      cache_valid_time: 3600
      state: latest
    with_items: "{{ travis_lxc_packages }}"
  become: True

- name: Install needed Python libraries
  pip:
    name: "{{ item }}"
    state: latest
  with_items: "{{ travis_lxc_eggs }}"

- name: Create SSH directory for current user
  file:
    path: "~{{ ansible_user_id }}/.ssh"
    state: directory
    mode: 0700

- name: Generate local ssh-rsa key
  user:
    name: "{{ ansible_user_id }}"
    generate_ssh_key: true
    ssh_key_file: "~{{ ansible_user_id }}/.ssh/id_rsa"
    ssh_key_type: rsa
    ssh_key_comment: "{{ ansible_user_id }}@{{ ansible_hostname }}-lxctest"

- name: Identify Travis CI's local Ubuntu mirror
  shell: 'apt-cache policy python | grep -m1 -oP "https?://.*?/ubuntu"'
  changed_when: False
  register: __travis_ubuntu_mirror_lookup

- name: Set fact for which mirror to use for Ubuntu LXC containers
  set_fact:
    __travis_ubuntu_mirror: "{{ __travis_ubuntu_mirror_lookup.stdout if __travis_ubuntu_mirror_lookup.stdout != '' else 'http://mirrors.us.kernel.org/ubuntu' }}"

- block:
  - name: Create {{ travis_lxc_distributions[__distro] }} test container(s)
    lxc_container:
      name: "{{ host_prefix }}{{ '%s' | format(item) }}"
      template: "{{ template }}"
      template_options: "--release {{ release }}{% if template in ['debian', 'ubuntu'] %} --mirror {% if template == 'ubuntu' %}{{ __travis_ubuntu_mirror }}{% else %}http://deb.debian.org/debian{% endif %} --packages {{ (travis_lxc_template_packages + additional_packages) | join(',') }}{% endif %}"
      container_config: "{{ container_config }}"
      state: started
    register: __ct_creation
    environment: "{{ travis_lxc_template_environment | default(omit) }}"
    with_sequence: count="{{ host_quantity | int }}" format="%02d"

  - name: Wait for test containers to come online
    lxc_container:
      name: "{{ host_prefix }}{{ '%s' | format(item) }}"
      container_command: "until (ip addr show eth0 up | grep -q 'inet '); do sleep 1; done"
    changed_when: false
    register: containers
    with_sequence: count="{{ host_quantity | int }}" format="%02d"

  - debug:
      var: containers
      verbosity: 1

  - name: Post configuration on {{ travis_lxc_distributions[__distro] }} container(s)
    lxc_container:
      name: "{{ __ct_creation.results[(item|int)-1].lxc_container.name }}"
      container_command: "{{ travis_lxc_template_container_command }}"
    with_sequence: count="{{ host_quantity | int }}"
    when:
      - travis_lxc_template_container_command is defined
      - __ct_creation.results[(item|int)-1] | changed

  - set_fact:
      lxc_hosts: "{{ lxc_hosts | default([]) | union([{'host': item.name, 'ip': item.ips[0]}]) }}"
    with_items: "{{ containers.results | map(attribute='lxc_container') | list }}"

  - name: Add test container(s) to host's /etc/hosts
    lineinfile:
      dest: /etc/hosts
      regexp: "^.* {{ item.host }}.lxc"
      line: "{{ item.ip }} {{ item.host }}.lxc"
    with_items: "{{ lxc_hosts }}"

  - name: Add test container(s) to container /etc/hosts
    lineinfile:
      dest: "/var/lib/lxc/{{ item.0 }}/rootfs/etc/hosts"
      regexp: "^.* {{ item.1.host }}.lxc"
      line: "{{ item.1.ip }} {{ item.1.host }}.lxc"
    with_nested:
      - "{{ lxc_hosts | map(attribute='host') | list }}"
      - "{{ lxc_hosts }}"

  - name: Create .ssh directory in containers
    file:
      path: "/var/lib/lxc/{{ item.host }}/rootfs/root/.ssh/"
      state: directory
      mode: 0700
    with_items: "{{ lxc_hosts }}"

  - name: Copy current user's public key into containers
    copy:
      src: "~/.ssh/id_rsa.pub"
      dest: "/var/lib/lxc/{{ item.host }}/rootfs/root/.ssh/authorized_keys"
      mode: 0600
    with_items: "{{ lxc_hosts }}"
  become: True

- name: Collect SSH host keys
  shell: "ssh-keyscan {{ item.host }}.lxc > ~{{ ansible_user_id }}/.ssh/{{ item.host }}.pub"
  args:
    creates: "~{{ ansible_user_id }}/.ssh/{{ item.host }}.pub"
  with_items: "{{ lxc_hosts }}"

- name: Add all containers to user's known_hosts
  blockinfile:
    marker: "# {mark} {{ item.host }}"
    content: "{{ lookup('file', '~' + ansible_user_id + '/.ssh/' + item.host + '.pub') }}"
    dest: "~{{ ansible_user_id }}/.ssh/known_hosts"
    create: yes
  with_items: "{{ lxc_hosts }}"

# vim:ft=ansible:
